version: '3.9'
services:
  # Service api
  api:
    build:
      context: ./
      dockerfile: ./apps/api/Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    AssignPublicIp: ENABLED
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Service image
  image:
    build:
      context: ./
      dockerfile: ./apps/image/Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    AssignPublicIp: ENABLED
    environment:
      IMG_PORT: "5050"
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Service scraper
  scraper:
    build:
      context: ./
      dockerfile: ./apps/Scraper/Dockerfile
    restart: unless-stopped
    ports:
      - "8001:8001"
    AssignPublicIp: DISABLED
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Service extractor
  extractor:
    build:
      context: ./
      dockerfile: ./apps/Extractor/Dockerfile
    restart: unless-stopped
    ports:
      - "8002:8002"
    AssignPublicIp: DISABLED
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Next.js web service
  web:
    build:
      context: ./
      dockerfile: ./apps/web/Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    AssignPublicIp: ENABLED
    depends_on:
      rabbitmq:
        condition: service_healthy

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  rabbitmq_data: