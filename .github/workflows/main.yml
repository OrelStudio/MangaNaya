name: Build and Deploy to AWS ECS

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # For each app in the monorepo (turborepo), tag and push to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash .github/scripts/git_update.sh -v patch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build and push "web" app
      - name: Build Web Docker image
        run: |
          docker build -t web:latest -f apps/web/Dockerfile .
          docker tag web:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/web:latest
      - name: Push Web Docker image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/web:latest

      # Build and push "api" app
      - name: Build API Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t api:latest -f apps/api/Dockerfile .
          docker tag api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/api:latest
      - name: Push API Docker image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/api:latest

      # Build "Extractor" app
      - name: Build Extractor Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t extractor:latest -f apps/Extractor/Dockerfile .
          docker tag extractor:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/extractor:latest
      - name: Push Extractor Docker image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/extractor:latest

      # Build "image" app
      - name: Buiild Image Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t image:latest -f apps/image/Dockerfile .
          docker tag image:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/image:latest
      - name: Push Image Docker image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/image:latest

      # Build "Scraper" app
      - name: Build Scraper Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t scraper:latest -f apps/Scraper/Dockerfile .
          docker tag scraper:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/scraper:latest
      - name: Push Scraper Docker image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/scraper:latest

      # Deploy Kubernetes manifests to EKS
      # This assumes EKS cluster already exists.
      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name manganaya-eks-cluster --region ${{ secrets.AWS_REGION }}

      - name: Deploy Web Service to EKS
        run: |
          kubectl delete -f k8s/web-deployment.yml
          kubectl apply -f k8s/web-deployment.yml

      - name: Deploy API Service to EKS
        run: |
          kubectl delete -f k8s/api-deployment.yml
          kubectl apply -f k8s/api-deployment.yml

      - name: Deploy Image Service to EKS
        run: |
          kubectl delete -f k8s/image-deployment.yml
          kubectl apply -f k8s/image-deployment.yml

      - name: Deploy Scraper Service to EKS
        run: |
          kubectl delete -f k8s/scraper-deployment.yml
          kubectl apply -f k8s/scraper-deployment.yml

      - name: Deploy Extractor Service to EKS
        run: |
          kubectl delete -f k8s/extractor-deployment.yml
          kubectl apply -f k8s/extractor-deployment.yml