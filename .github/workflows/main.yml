name: Build and Deploy to GKE with Artifact Registry

on:
  push:
    branches: [ main ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU (for multi-arch, if needed)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx (for multi-arch build)
        uses: docker/setup-buildx-action@v2

      # Authenticate to Google Cloud using the service account key JSON
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          version: 'latest'

      # Configure Docker to use gcloud as a credential helper for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud --quiet auth configure-docker us-central1-docker.pkg.dev

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash .github/scripts/git_update.sh -v minor
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build and push "Scraper" image
      - name: Build Scraper Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t scraper:latest -f apps/Scraper/Dockerfile .
          docker tag scraper:latest us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/scraper:latest
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/scraper:latest

      # Build and push "Web" image
      - name: Build Web Docker image
        run: |
          docker build -t web:latest -f apps/web/Dockerfile .
          docker tag web:latest us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/web:latest
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/web:latest

      # Build and push "API" image
      - name: Build API Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t api:latest -f apps/api/Dockerfile .
          docker tag api:latest us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/api:latest
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/api:latest

      # Build and push "Extractor" image
      - name: Build Extractor Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t extractor:latest -f apps/Extractor/Dockerfile .
          docker tag extractor:latest us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/extractor:latest
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/extractor:latest

      # Build and push "Image" image
      - name: Build Image Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t image:latest -f apps/image/Dockerfile .
          docker tag image:latest us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/image:latest
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-apps/image:latest

      # Get GKE credentials and configure kubectl
      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Deploy Kubernetes manifests to GKE
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/ --validate=false
          kubectl rollout status deployment/web-deployment --timeout=90s
