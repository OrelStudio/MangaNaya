name: Build and Deploy to Oracle OKE

on:
  push:
    branches: [ main ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCI_CLI_USER: ${{ secrets.CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.CLI_TENANCY }}
      OCI_CLI_REGION: ${{ secrets.CLI_REGION }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU (for multi-arch, if needed)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx (for multi-arch build)
        uses: docker/setup-buildx-action@v2

      - name: Log in to Oracle Container Registry
        uses: oracle-actions/login-ocir@v1.1
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      # Explicit Docker login to ensure authentication is used in subsequent push commands.
      - name: Docker login to OCI Registry
        run: |
          echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login ${{ secrets.OCI_REGION_KEY }}.ocir.io -u "${{ secrets.OCI_TENANCY_NS }}/orel890x@gmail.com" --password-stdin

      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
          export PATH=$PATH:$HOME/bin

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash .github/scripts/git_update.sh -v minor
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build "Scraper" app
      - name: Build Scraper Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t scraper:latest -f apps/Scraper/Dockerfile .
          docker tag scraper:latest ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/scraper:latest
      - name: Push Scraper Docker image
        run: |
          docker push ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/scraper:latest

      # Build "Web" app
      - name: Build Web Docker image
        run: |
          docker build -t web:latest -f apps/web/Dockerfile .
          docker tag web:latest ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/web:latest
      - name: Push Web Docker image
        run: |
          docker push ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/web:latest

      # Build "API" app
      - name: Build API Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t api:latest -f apps/api/Dockerfile .
          docker tag api:latest ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/api:latest
      - name: Push API Docker image
        run: |
          docker push ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/api:latest

      # Build "Extractor" app
      - name: Build Extractor Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t extractor:latest -f apps/Extractor/Dockerfile .
          docker tag extractor:latest ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/extractor:latest
      - name: Push Extractor Docker image
        run: |
          docker push ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/extractor:latest

      # Build "Image" app
      - name: Build Image Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t image:latest -f apps/image/Dockerfile .
          docker tag image:latest ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/image:latest
      - name: Push Image Docker image
        run: |
          docker push ${{ secrets.OCI_REGION_KEY }}.ocir.io/${{ secrets.OCI_TENANCY_NS }}/image:latest

      # Configure kubectl for Oracle OKE
      - name: Configure Kubectl for OKE
        uses: oracle-actions/configure-kubectl-oke@v1.5.0
        with:
          cluster: ${{ secrets.OKE_CLUSTER_OCID }}

      # Deploy Kubernetes manifests to OKE (includes deployments, services, ingress, etc.)
      - name: Deploy to OKE
        run: |
          kubectl apply -f k8s/ --validate=false
          kubectl rollout status deployment/web-deployment --timeout=90s
